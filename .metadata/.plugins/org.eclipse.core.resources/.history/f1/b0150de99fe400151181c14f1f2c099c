package haufe;

import java.awt.Toolkit;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.Dimension;
import org.openqa.selenium.Platform;
import org.openqa.selenium.Point;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.testng.Reporter;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Optional;
import org.testng.annotations.Parameters;

import haufe.home.Home;

public class LoadBrowser {
	
	protected ThreadLocal<RemoteWebDriver> threadDriver = null;

	 
	 /* Selenium Grid HUB URL */
	 public static String applicationURL = "http://www.umantis.com/";
	 private String hubURL = "http://9.162.138.157:4444/wd/hub";
	 
	 public String currentBrowser;
	 public String version;
	 public String platform;
	 
	 int numberOfTimesToRetryInitialization = 3;
	 int currentRetry=0;
	 
	 /* Supported browsers are internet explorer, chrome, safari and firefox */
	 @Parameters({"browser","version","platform"})
	 @BeforeMethod(groups={"BVT","FullRegression","test","UAT-BVT"})
	 public synchronized void setUp( @Optional("chrome") String browser, @Optional("")String version, @Optional("")String platform) throws MalformedURLException 
	 { 		 	
		 	this.currentBrowser=browser.toLowerCase();
		 	this.version=version.toLowerCase();
		 	this.platform=platform.toLowerCase();		 	
		 	
		 	threadDriver = new ThreadLocal<RemoteWebDriver>();    
	        DesiredCapabilities dc = new DesiredCapabilities();	       
	        
	        /* Set platform, if required */
	        if (!platform.equals(""))
	        {
	        	if (platform.equals("WIN7"))	        	
	        		dc.setPlatform(Platform.WINDOWS);
	        	else if (platform.equals("MAC"))
	        		dc.setPlatform(Platform.MAC);
	        	else if (platform.equals("WIN8"))
	        		dc.setPlatform(Platform.WIN8);
	        	else
	        		dc.setPlatform(Platform.WINDOWS);
	        }	 	        
	        
	        /* Allowed browser values are chrome, firefox and internet explorer , safari*/
	        dc.setBrowserName(browser);
	        
	        /* For internet explorer, ignore security domains to prevent UnreachableBrowserException error */
	        if (browser.equals("internet explorer"))
	        	dc.setCapability(InternetExplorerDriver.INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
	        
	        /* Set browser version, if required */
	        if (!version.equals(""))
	        	dc.setVersion(version);        
	        
	        /* Retry launching the driver n times
		 	 * This prevents the error in firefox
		 	 * Unable to bind to locking port 7054 within 45000 ms */
	        currentRetry=0;
		 	while (currentRetry<numberOfTimesToRetryInitialization)
		 	{
		 		try {
		 			threadDriver.set(new RemoteWebDriver(new URL(hubURL), dc));
		 			if (currentRetry!=0)
		 				Reporter.log("Successfully initialized driver on retry");
		 			currentRetry=numberOfTimesToRetryInitialization;		 			
		 		}
		 		catch(Exception e) {
		 			currentRetry++;
		 			Reporter.log(e.getMessage());
		 			/* Wait 60 seconds */
		 			try {
		 				Reporter.log("Waiting 60 seconds to retry initializing driver");
						Thread.sleep(60000);
						Reporter.log("Retrying to initialize driver");
					} catch (InterruptedException t) {
						t.printStackTrace();						
					}
		 		}		 		
		 	}
	        
	        if (platform.equals("MAC"))
	        {
	        	java.awt.Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	        	int width = (int)screenSize.getWidth();
	        	int height = (int)screenSize.getHeight();
	        	Point p = new Point(0,0);
	        	Dimension d = new Dimension(width,height);
	        	getDriver().manage().window().setPosition(p);
	        	getDriver().manage().window().setSize(d);
	        }
	        else
	        	getDriver().manage().window().maximize();
	
	        /* Add implicit wait */
	        getDriver().manage().timeouts().implicitlyWait(Long.parseLong("60"), TimeUnit.SECONDS);
	 }
	 
	 public WebDriver getDriver() 
	 {
			return threadDriver.get();
	 }
	 
	 public void getHomePage(){
		 
		 /* The home page should launch */
	     	Home homePage = new Home(getDriver());
		 
	 }
	 	 			
	@AfterMethod(groups={"BVT","FullRegression"}, alwaysRun = true)
	 public void closeBrowser() 
	 {
		/* Close the browser */
		if (getDriver() != null)
			getDriver().quit();	 
	 }
}
